# Default values for dependency-track.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
# Since dependency-track 4.0, there are now two separate images. One for frontend, one for the apiserver.
 
# -- global configuration
global:
  imageRegistry: docker.io
frontend:
  enabled: true
  annotations: {}
  replicaCount: 1 #changereplica count for frontend from 2 to 1
  image:
    repository: dependencytrack/frontend
    tag: 4.9.0
    pullPolicy: IfNotPresent
  # https://github.com/DependencyTrack/frontend/issues/60
  # configmap:
  #  config: |
  #    {
  #      "API_BASE_URL": "",
  #      "OIDC_ISSUER": "",
  #      "OIDC_CLIENT_ID": "",
  #      "OIDC_SCOPE": "openid profile email",
  #      "OIDC_FLOW": ""
  #    }
  # --See https://docs.dependencytrack.org/getting-started/configuration/ for frontend ENV variables.
  env:
  - name: API_BASE_URL
    value: "https://dependency-track-apiserver-dependency-track.apps-crc.testing"
  ##- name: OIDC_ISSUER
  ##  value: "https://login.microsoftonline.com/a9d3abc9-3302-4217-8969-726e46809c6d/v2.0"
  ##- name: OIDC_CLIENT_ID
  ##  value: 52af8bcc-87e5-4245-aac1-c613962732dd
  ##- name: OIDC_SCOPE
  ##  value: "openid profile email"
    # See https://docs.dependencytrack.org/getting-started/configuration/ for frontend ENV variables.
#  podSecurityContext:
#    fsGroup: 1000
  securityContext:
    allowPrivilegeEscalation: false
    # rootfs cannot be R/O because there is some messing around with file generation and whatnot
  service:
    type: ClusterIP
    port: 8080
    annotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  emptyDir:
    sizeLimit: 8Gi
  resources:
  # https://docs.dependencytrack.org/getting-started/deploy-docker/
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 1
      memory: 512Mi
  nameOverride: ""
  fullnameOverride: ""
  initContainers: []
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: frontend-serviceaccount
    # Annotations to add
    # Example:
    #  iam.gke.io/gcp-service-account: a@b.com
    annotations: {}
  livenessProbe:
    enabled: true
    path: "/"
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 2
    successThreshold: 1
    failureThreshold: 3
  readinessProbe:
    enabled: true
    path: "/"
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 2
    successThreshold: 1
    failureThreshold: 3
 
 
# -- config of the apiserver
apiserver:
  enabled: true
  annotations: {}
  # sidecarContainers - add more containers to the api-server (e.g. Google Cloud SQL Proxy)
  # Key/Value where Key is the sidecar `- name: <Key>`
  # Example:
  #   sidecarContainers:
  #      cloud-sql-proxy:
  #        image: gcr.io/cloudsql-docker/gce-proxy:1.23.0
  sidecarContainers: {}
# Max: 1 - DT is not designed for HA
  replicaCount: 1
  image:
    repository: dependencytrack/apiserver
    tag: 4.9.0
    pullPolicy: IfNotPresent
  env:
  ##- name: ALPINE_OIDC_CLIENT_ID
  ##  value: 52af8bcc-87e5-4245-aac1-c613962732dd
  ##- name: ALPINE_OIDC_ENABLED
  ##  value: "true"
  ##- name: ALPINE_OIDC_ISSUER
  ##  value: "https://login.microsoftonline.com/a9d3abc9-3302-4217-8969-726e46809c6d/v2.0"
  ##- name: ALPINE_OIDC_USERNAME_CLAIM
  ##  value: email
  ##- name: ALPINE_OIDC_USER_PROVISIONING
  ##  value: "true"
  persistentVolume:
    accessModes:
    - ReadWriteOnce
    enabled: true
    size: 8Gi
    annotations: {}
    storageClass: ""
  securityContext:
    readOnlyRootFilesystem: true
    runAsNonRoot: true
  service:
    type: ClusterIP
    port: 8080
    annotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  emptyDir:
    sizeLimit: 8Gi
  resources:
  # https://docs.dependencytrack.org/getting-started/deploy-docker/
    requests:
      cpu: 2
      memory: 4608Mi
    limits:
      cpu: 4
      memory: 16Gi
  nameOverride: ""
  fullnameOverride: ""
  initContainers: []
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: apiserver-serviceaccount
    # Annotations to add
    # Example:
    #  iam.gke.io/gcp-service-account: a@b.com
    annotations: {}
  # See https://docs.dependencytrack.org/getting-started/configuration/ for backend configuration options.
  livenessProbe:
    enabled: true
    path: "/api/version"
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 2
    successThreshold: 1
    failureThreshold: 3
  readinessProbe:
    enabled: true
    path: "/"
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 2
    successThreshold: 1
    failureThreshold: 3
 
# -- configuration of ingress
ingress:
  enabled: false
  tls:
    enabled: false
    secretName: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    ## allow large bom.xml uploads:
    # nginx.ingress.kubernetes.io/proxy-body-size: 10m
  host: deptrack.local
  # ingressClassName: nginx
database:
  # internal - deploys a PostgreSQL database to the Kubernetes cluster (currently only supports postgres)
  internal:
    enabled: true
    ##enabled: false
    postgresql:
      username: deptrack
      password: deptrack
      database: deptrack
  # Allows for configuring dependency track to use an external database
  external:
    enabled: false
    ##enabled: true
    # Please see variable definitions here https://docs.dependencytrack.org/getting-started/configuration/
    ##databaseMode: "external"
    ##databaseDriver: "org.postgresql.Driver"
    ##databaseURL: "jdbc:postgresql://{database.instance}.preprod.sallinggroup.io:5432/{database]?user=[database_user]&password=[database]"
    ##databaseUsername: deptrack
      # Store the database user password in a Kubernetes Secret
    ##databaseUserPassword:
    ##  secretName: deptrack  #tempo
    ##  secretKey: "deptrack" #tempo
      # IT IS ADVISED THAT THIS VALUE IS NOT DECLARED AND STORED IN GIT UNENCRYPTED
    ##  secretValue: ${{az keyvault secret show --name "deptrackDbPassword" --vault-name "eco-deptrack-preprod" --query 'value' --out tsv}}
    ##  createSecret: true
    ##  databaseUsername: "deptrack" #tempo